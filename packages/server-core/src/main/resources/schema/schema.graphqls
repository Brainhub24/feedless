scalar DateTime
scalar JSON
scalar Long

enum ArticleReleaseStatus {
  released,
  unreleased,
  dropped
}

enum ArticleType {
  feed,
  ops
}

enum Visibility {
  isPublic,
  isProtected,
  isPrivate
}

enum SortOrder {
  desc, asc
}

enum SortField {
  publishedAt,
}

interface Paginated {
  pagination: Pagination!
}

interface Entity {
  id: ID!
  createdAt: Long!
}

type Subscription {
  authViaMail(email: String!): AuthenticationEvent!
}

type AuthenticationEvent {
  authentication: Authentication
  message: AuthenticationEventMessage
  confirmCode: ConfirmCode
}

type AuthenticationEventMessage {
  isError: Boolean!
  message: String!
}

type ConfirmCode {
  otpId: ID!
  length: Int!
}

type Authentication {
  token: String!
  corrId: String!
}

type Query {
  serverSettings: ServerSettings!
  article(data: ArticleWhereInput!): Article!
  content(data: ContentWhereInput!): Content!
  nativeFeed(data: NativeFeedWhereInput!): NativeFeed!
  genericFeed(data: GenericFeedWhereInput!): GenericFeed!
  bucket(data: BucketWhereInput!): Bucket!
  importer(data: ImporterInput!): Importer!
  importers(data: ImportersPagedInput!): PagedImportersResponse!
  articles(data: ArticlesPagedInput!): PagedArticlesResponse!
  discoverFeeds(data: DiscoverFeedsInput!): FeedDiscoveryResponse!
  buckets(data: BucketsPagedInput!): PagedBucketsResponse!
  nativeFeeds(data: NativeFeedsPagedInput!): PagedNativeFeedsResponse!
  genericFeeds(data: GenericFeedsPagedInput!): PagedGenericFeedsResponse!
  remoteNativeFeed(nativeFeedUrl: String!): RemoteNativeFeed!
  profile: Profile!
  plans: [Plan!]!
}

type Profile {
  minimalFeatureState: FeatureState!
  preferFulltext: Boolean!
  isLoggedIn: Boolean!
  isAnonymous: Boolean!
  dateFormat: String
  timeFormat: String
  user: User
  preferReader: Boolean!
  featuresOverwrites: [Feature!]!
}

type Plan {
  planName: PlanName!
  isPrimary: Boolean!
  availability: PlanAvailability!
  costs: Float!
  features: [Feature!]!
}

enum PlanAvailability {
  available,
  by_request,
  unavailable
}

enum PlanName {
  free,
  basic
}

type ServerSettings {
  apiUrls: ApiUrls!
  features: [Feature!]!
}

type ApiUrls {
  webToFeed: String!
}

type Feature {
  state: FeatureState!
  name: FeatureName!
  value: FeatureValue
}

type FeatureValue {
  boolVal: FeatureBooleanValue
  numVal: FeatureIntValue
}

type FeatureIntValue {
  value: Int!
}

type FeatureBooleanValue {
  value: Boolean!
}

enum FeatureState {
  off,
  experimental,
  beta,
  stable
}

enum FeatureName {
  database,
  elasticsearch,
  puppeteer,
  authentication,
  authenticated,
  authAllowRoot,
  authSSO,
  authMail,
#
  rateLimit,
  notifications,
  feedsMaxRefreshRate,
  bucketsMaxCount,
  bucketsAccessOther,
  feedsMaxCount,
  feedsFulltext,
  itemsInlineImages,

  genFeedFromWebsite,
  genFeedFromFeed,
  genFeedFromPageChange,
  genFeedWithPrerender,
  genFeedWithPuppeteerScript,

  itemsNoUrlShortener,
  itemsRetention,
  feedsPrivateAccess,
  bucketsPrivateAccess,
  feedAuthentication,
  itemEmailForward,
  itemWebhookForward,
  api
}

input BucketWhereInput {
  where: BucketUniqueWhereInput!
}

input GenericFeedWhereInput {
  where: GenericFeedUniqueWhereInput!
}

input NativeFeedWhereInput {
  where: NativeFeedUniqueWhereInput!
}

input ContentWhereInput {
  where: ContentUniqueWhereInput!
}

input ArticleWhereInput {
  where: ArticleUniqueWhereInput!
}

type ArticleContext {
  articleId: ID!
  articles(page: Int!): [Article!]!
  links(page: Int!): [WebDocument!]!
  #  buckets(page: Int!): [Bucket!]
  #  nativeFeeds(page: Int!): [NativeFeed!]
}

type WebDocument {
  id: ID!
  title: String!
  description: String
  type: String!
  url: String!
  imageUrl: String
  score: Float
  createdAt: Long!
}

type Mutation {
  authAnonymous: Authentication!
  authConfirmCode(data: ConfirmAuthCodeInput!): Boolean!

  createArticle(data: ArticleCreateInput!): Article!
  updateArticles(data: ArticlesUpdateWhereInput!): Boolean!
  deleteArticles(data: ArticlesDeleteWhereInput!): Boolean!

  createBucket(data: BucketCreateInput!): Bucket!
  updateBucket(data: BucketUpdateInput!): Bucket!
  deleteBucket(data: BucketDeleteInput!): Boolean!

  createImporters(data: ImportersCreateInput!): [Importer!]!
  updateImporter(data: ImporterUpdateInput!): Importer!
  deleteImporter(data: ImporterDeleteInput!): Boolean!

  createNativeFeed(data: NativeFeedCreateInput!): NativeFeed!
  updateNativeFeed(data: NativeFeedUpdateInput!): NativeFeed!
  deleteNativeFeed(data: NativeFeedDeleteInput!): Boolean!

  createGenericFeed(data: GenericFeedCreateInput!): GenericFeed!
  updateGenericFeed(data: GenericFeedUpdateInput!): GenericFeed!
  deleteGenericFeed(data: GenericFeedDeleteInput!): Boolean!

#  createPageChangeFeed(data: PageChangeFeedCreateInput!): PageChangeFeed!

  matchFilter(data: MatchFilterInput!): [Boolean!]!

  exportOpml: ExportOpmlResponse!
  acceptTermsAndConditions: Boolean!
  logout: Boolean
}

input MatchFilterInput {
  articles: [ContentInput!]!
  filter: String!
}

input ConfirmAuthCodeInput {
  code: String!
  otpId: ID!
}

type ExportOpmlResponse {
  data: String!
}

input ArticlesDeleteWhereInput {
  where: ArticleMultipleWhereInput!
}

input ArticleMultipleWhereInput {
  in: [ArticleUniqueWhereInput!]!
}

input ArticlesUpdateWhereInput {
  where: ArticleMultipleWhereInput!
  data: ArticleInput!
}

input ArticleInput {
  status: ArticleReleaseStatusUpdateOperationsInput
}

input ArticleCreateInput {
  data: ArticleCreateOrConnectInput!
  reference: BucketOrNativeFeedOrArticleWhereInput
}

input BucketOrNativeFeedOrArticleWhereInput {
  article: ArticleUniqueWhereInput
  bucket: BucketUniqueWhereInput
  nativeFeed: NativeFeedUniqueWhereInput
}

input NativeFeedUniqueWhereInput {
  id: ID!
}

input BucketUniqueWhereInput {
  id: ID!
}

input ArticleCreateOrConnectInput {
  create: ArticleInput
  connect: ArticleUniqueWhereInput
}

input ArticleUniqueWhereInput {
  id: ID!
}

input ContentUniqueWhereInput {
  id: ID!
}

input ImporterInput {
  importer: ImporterUniqueWhereInput
  bucketAndFeed: ImporterWhereBucketAndFeedInput
}

input ImportersPagedInput {
  where: ImportersWhereInput
  page: Int
  orderBy: OrderByInput
}

input ImportersWhereInput {
  status: NativeFeedStatusOneOfInput
  buckets: BucketsOneOfWhereInput
}

input BucketsOneOfWhereInput {
  oneOf: [ID!]!
}

input ImporterWhereBucketAndFeedInput {
  bucket: BucketUniqueWhereInput!
  nativeFeed: NativeFeedUniqueWhereInput!
}

input GenericFeedDeleteInput {
  genericFeed: GenericFeedUniqueWhereInput!
}

input GenericFeedUniqueWhereInput {
  id: ID!
}

input NativeFeedDeleteInput {
  nativeFeed: NativeFeedUniqueWhereInput!
}

input ImporterDeleteInput {
  where: ImporterUniqueWhereInput!
}
input ImporterUniqueWhereInput {
  id: ID!
}

input BucketDeleteInput {
  where: BucketUniqueWhereInput!
}

input GenericFeedCreateInput {
  specification: GenericFeedSpecificationInput!
  title: String!
  description: String
  websiteUrl: String!
  language: String
  harvestItems: Boolean!
  harvestSiteWithPrerender: Boolean!
  harvestIntervalMin: Int
}

input GenericFeedUpdateInput {
  data: GenericFeedUpdateDataInput!
  where: GenericFeedUniqueWhereInput!
}

input GenericFeedUpdateDataInput {
  specification: GenericFeedSpecificationInput!
  title: StringUpdateOperationsInput
  description: NullableStringUpdateOperationsInput
  websiteUrl: StringUpdateOperationsInput
  harvestSiteWithPrerender: BoolUpdateOperationsInput
}

input GenericFeedSpecificationInput {
  selectors: SelectorsInput!
  parserOptions: ParserOptionsInput!
  fetchOptions: FetchOptionsInput!,
  refineOptions: RefineOptionsInput!
}

type GenericFeedSpecification {
  selectors: Selectors!
  parserOptions: ParserOptions!
  fetchOptions: FetchOptions!,
  refineOptions: RefineOptions!
}

enum ExtendContentOptions {
  PREVIOUS,
  NEXT,
  NONE,
  PREVIOUS_AND_NEXT
}

input SelectorsInput {
  linkXPath: String!
  extendContext: ExtendContentOptions!
  contextXPath: String!
  dateXPath: String!
  paginationXPath: String!
  dateIsStartOfEvent: Boolean!
}

type Selectors {
  linkXPath: String!
  extendContext: ExtendContentOptions!
  contextXPath: String!
  paginationXPath: String!
  dateXPath: String!
  dateIsStartOfEvent: Boolean!
}

input ImportersCreateInput {
  bucket: BucketCreateOrConnectInput!
  feeds: [NativeFeedCreateOrConnectInput!]!
  title: String
  autoRelease: Boolean
  filter: String
  email: String
  webhook: String
}

input ImporterUpdateInput {
  feed: NativeFeedCreateOrConnectInput!
  bucket: BucketCreateOrConnectInput!
  autoRelease: BoolUpdateOperationsInput
  title: NullableStringUpdateOperationsInput
  filter: NullableStringUpdateOperationsInput
  email: NullableStringUpdateOperationsInput
  webhook: NullableStringUpdateOperationsInput
  where: ImporterUniqueWhereInput!
}

input NativeFeedCreateOrConnectInput {
  connect: NativeFeedUniqueWhereInput
  create: NativeOrGenericFeedCreateInput
}

input BucketCreateOrConnectInput {
  connect: BucketUniqueWhereInput
  create: BucketCreateInput
}

input NativeOrGenericFeedCreateInput {
  nativeFeed: NativeFeedCreateInput
  genericFeed: GenericFeedCreateInput
}

input BucketsPagedInput {
  page: Int!
  where: BucketsWhereInput
  orderBy: OrderByInput
}

input NativeFeedsPagedInput {
  page: Int!
  where: NativeFeedsWhereInput!
  orderBy: OrderByInput
}

input GenericFeedsPagedInput {
  page: Int!
  where: GenericFeedsWhereInput!
}

input OrderByInput {
  createdAt: SortOrder
  title: SortOrder
}

input ArticlesOrderByInput {
  releasedAt: SortOrder
  createdAt: SortOrder
  title: SortOrder
}

input NativeFeedsWhereInput {
  query: String
  feedUrl: String
  status: NativeFeedStatusOneOfInput
  visibility: VisibilityOneOfInput
}

input GenericFeedsWhereInput {
  websiteUrl: String
}

input BucketsWhereInput {
  query: String
  ownerId: ID
}

input NativeFeedStatusOneOfInput {
  oneOf: [NativeFeedStatus!]!
}

input VisibilityOneOfInput {
  oneOf: [Visibility!]!
}

input DiscoverFeedsInput {
  parserOptions: ParserOptionsInput!
  fetchOptions: FetchOptionsInput!
}

input ParserOptionsInput {
  strictMode: Boolean!
}

input ArticlesInBucketInput {
  bucketId: String!
  filter: ArticlesWhereInput
}

input ArticlesPagedInput {
  page: Int!
  where: ArticlesWhereInput!
  orderBy: ArticlesOrderByInput
}

input ArticlesWhereInput {
  streamId: String!
  query: String
  type: ArticleTypeFilterInput
  status: ArticleReleaseStatusFilterInput
}

input ArticleReleaseStatusFilterInput {
  oneOf: [ArticleReleaseStatus!]!
}

input ArticleTypeFilterInput {
  oneOf: [ArticleType!]!
}

input BucketCreateInput {
  title: String!
  description: String!
  websiteUrl: String
  imageUrl: String
  visibility: Visibility!
  tags: String
}

input BucketUpdateInput {
  where: BucketUniqueWhereInput!
  data: BucketUpdateDataInput!
}

input BucketUpdateDataInput {
  name: NullableStringUpdateOperationsInput
  description: NullableStringUpdateOperationsInput
  websiteUrl: NullableStringUpdateOperationsInput
  imageUrl: NullableStringUpdateOperationsInput
  visibility: VisibilityUpdateOperationsInput
  tags: NullableStringArrayUpdateOperationsInput
}

input NullableStringUpdateOperationsInput {
  set: String
}

input NullableLongUpdateOperationsInput {
  set: Long
}

input NullableIntUpdateOperationsInput {
  set: Int
}

input StringUpdateOperationsInput {
  set: String!
}
input ArticleReleaseStatusUpdateOperationsInput {
  set: ArticleReleaseStatus!
}

input NullableBoolUpdateOperationsInput {
  set: Boolean
}
input BoolUpdateOperationsInput {
  set: Boolean!
}

input NullableStringArrayUpdateOperationsInput {
  set: [String!]
}

input NativeFeedCreateInput {
  websiteUrl: String
  imageUrl: String
  language: String
  feedUrl: String!
  title: String
  description: String
  lat: Long
  lon: Long
  harvestIntervalMin: Int
  autoRelease: Boolean
  harvestItems: Boolean
  harvestSiteWithPrerender: Boolean
  visibility: Visibility
}

input NativeFeedUpdateInput {
  id: ID!
  websiteUrl: NullableStringUpdateOperationsInput
  imageUrl: NullableStringUpdateOperationsInput
  language: NullableStringUpdateOperationsInput
  feedUrl: StringUpdateOperationsInput
  title: StringUpdateOperationsInput
  description: NullableStringUpdateOperationsInput
  lat: NullableLongUpdateOperationsInput
  lon: NullableLongUpdateOperationsInput
  harvestIntervalMin: NullableIntUpdateOperationsInput
  autoRelease: BoolUpdateOperationsInput
  harvestItems: BoolUpdateOperationsInput
  harvestSiteWithPrerender: BoolUpdateOperationsInput
  visibility: VisibilityUpdateOperationsInput!
}

input VisibilityUpdateOperationsInput {
  set: Visibility!
}


type RemoteNativeFeed {
  title: String!
  description: String
  author: String
  websiteUrl: String
  language: String
  items: [Content!],
  feedUrl: String!
  publishedAt: Long!
  expired: Boolean!
}

type PagedBucketsResponse implements Paginated {
  pagination: Pagination!
  buckets: [Bucket!]!
}

type PagedNativeFeedsResponse implements Paginated {
  nativeFeeds: [NativeFeed!]!
  pagination: Pagination!
}

type PagedGenericFeedsResponse implements Paginated {
  genericFeeds: [GenericFeed!]!
  pagination: Pagination!
}

type PagedArticlesResponse implements Paginated {
  articles: [Article!]!
  pagination: Pagination!
}

type PagedImportersResponse implements Paginated {
  importers: [Importer!]!
  pagination: Pagination!
}

type Pagination {
  page: Int!
#  totalPages: Int!
#  totalElements: Long!
  isLast: Boolean!
  isEmpty: Boolean!
  isFirst: Boolean!
}

type GenericFeed implements Entity {
  id: ID!
  specification: GenericFeedSpecification!
  feedUrl: String!
  hash: String!
  nativeFeedId: ID!
  createdAt: Long!
  #  nativeFeed: NativeFeed!
}

type NativeFeed implements Entity {
  id: ID!
  createdAt: Long!
  domain: String
  websiteUrl: String
  imageUrl: String
  iconUrl: String
  feedUrl: String!
  title: String!
  description: String
  streamId: String!
  status: NativeFeedStatus!
#  status: String!
  autoRelease: Boolean!
  genericFeed: GenericFeed
  lastUpdatedAt: Long
  lastChangedAt: Long
#  nextRefreshAt: Long
  visibility: Visibility!
  lat: Long
  lon: Long
  importers: [Importer!]!
  #  importersCount: Long!
}

type Bucket implements Entity {
  id: ID!
  createdAt: Long!
  title: String!
  tags: String
  description: String!
  websiteUrl: String
  imageUrl: String
  visibility: Visibility!
  streamId: String!
  #  articles(filter: ArticlesWhereInput!): PagedArticlesResponse!
  lastUpdatedAt: Long
  importers: [Importer!]
  #  owner
}

type Importer implements Entity {
  id: ID!
  createdAt: Long!
  autoRelease: Boolean!
  filter: String
  title: String
  email: String
  webhook: String
  lastUpdatedAt: Long
  nativeFeedId: ID!
  nativeFeed: NativeFeed!
  bucketId: ID!
  bucket: Bucket!
}

enum NativeFeedStatus {
  ok,
  disabled,
  not_found,
  never_fetched,
  service_unavailable
}

type Enclosure {
  length: Float
  type: String!
  url: String!
}

type Article implements Entity {
  id: ID!
  createdAt: Long!
  status: ArticleReleaseStatus!
  contentId: ID!
  streamId: ID!
  nativeFeedId: ID!
  bucket: Bucket
  context: ArticleContext!
  nativeFeed: NativeFeed!
  content: Content!
  type: ArticleType!
}

type Content implements Entity {
  id: ID!
  createdAt: Long!
  title: String!
  description: String!
  contentTitle: String
  contentText: String
  contentRaw: String
  contentRawMime: String
  url: String!
  imageUrl: String
  publishedAt: Long!
  startingAt: Long
  updatedAt: Long!
  tags: [String!]
  enclosures: [Enclosure!]
}

input ContentInput {
  title: String!
  contentText: String!
  contentRaw: String
  contentRawMime: String
  url: String!
  publishedAt: Long!
#  enclosures: [Enclosure!]
}

type FeedDiscoveryResponse {
  genericFeeds: GenericFeeds!
  nativeFeeds: [TransientNativeFeed!]
  #  relatedFeeds: [NativeFeedGql]
  websiteUrl: String!
  failed: Boolean!
  errorMessage: String
  document: FeedDiscoveryDocument
}

type FeedDiscoveryDocument {
  mimeType: String
  htmlBody: String
  title: String
  description: String
  language: String
  imageUrl: String
  favicon: String
}

type GenericFeeds {
  feeds: [TransientGenericFeed!]!
  parserOptions: ParserOptions!
  fetchOptions: FetchOptions!
}

type FetchOptions {
  websiteUrl: String!
  prerender: Boolean!
  prerenderWaitUntil: PuppeteerWaitUntil!
  prerenderWithoutMedia: Boolean!
  prerenderScript: String
}

type ParserOptions {
  strictMode: Boolean!
}

type TransientNativeFeed {
  url: String!
  type: String!
  title: String!
  description: String
}

type TransientGenericFeed {
  selectors: Selectors!
  hash: String!
  feedUrl: String!
  count: Int
  score: Float!
  samples: [Content!]!
}

input FetchOptionsInput {
  websiteUrl: String!
  prerender: Boolean!
  prerenderWaitUntil: PuppeteerWaitUntil!
  prerenderWithoutMedia: Boolean!
  prerenderScript: String
}

enum PuppeteerWaitUntil {
  networkidle0
  networkidle2
  load
  domcontentloaded
}

enum ContentSortTag {
  newest,
  oldest,
  title
}
enum ContentTypeTag {
  LONG,
  SHORT,
  AUDIO,
  VIDEO,
  FULLTEXT
}

enum ContentCategoryTag {
  kids
  sports
  commercial
  online
}

type RefineOptions {
  filter: String,
  recovery: ArticleRecoveryType!,
}

input RefineOptionsInput {
  filter: String,
  recovery: ArticleRecoveryType!,
}

enum ArticleRecoveryType {
  NONE,
  METADATA,
  FULL
}

type LoginResponse {
  token: String!
  user: User!
}

type User implements Entity {
  id: ID!
  createdAt: Long!
  email: String!
  name: String!
  acceptedTermsAndServices: Boolean!
  notificationsStreamId: ID!
}
