scalar DateTime
scalar JSON
scalar Long

enum ReleaseStatus {
  released,
  needs_approval
}

enum ArticleType {
  digest
  feed
}

enum BucketVisibility {
  isPublic,
  isHidden
}

enum SortOrder {
  desc, asc
}

enum SortField {
  publishedAt,
}

interface Paginated {
  pagination: Pagination!
}

interface Entity {
  id: ID!
  createdAt: Long!
}

type Query {
  article(data: ArticleWhereInput!): Article!
  content(data: ContentWhereInput!): Content!
  nativeFeed(data: NativeFeedWhereInput!): NativeFeed!
  genericFeed(data: GenericFeedWhereInput!): GenericFeed!
  bucket(data: BucketWhereInput!): Bucket!
  importer(data: ImporterWhereInput!): Importer!
  articles(data: ArticlesPagedInput!): PagedArticlesResponse!
  discoverFeeds(data: DiscoverFeedsInput!): FeedDiscoveryResponse!
  buckets(data: BucketsPagedInput!): PagedBucketsResponse!
  nativeFeeds(data: NativeFeedsInput!): PagedNativeFeedsResponse!
  genericFeeds(data: GenericFeedsInput!): PagedGenericFeedsResponse!
  remoteNativeFeed(nativeFeedUrl: String!): RemoteNativeFeed!
}

input BucketWhereInput {
  where: BucketUniqueWhereInput!
}

input GenericFeedWhereInput {
  where: GenericFeedUniqueWhereInput!
}

input NativeFeedWhereInput {
  where: NativeFeedUniqueWhereInput!
}

input ContentWhereInput {
  where: ContentUniqueWhereInput!
}

input ArticleWhereInput {
  where: ArticleUniqueWhereInput!
}

type ArticleContext {
  articleId: ID!
  articles(page: Int!): [Article!]!
  links(page: Int!): [WebDocument!]!
  #  buckets(page: Int!): [Bucket!]
  #  nativeFeeds(page: Int!): [NativeFeed!]
}

type WebDocument {
  id: ID!
  title: String!
  description: String
  type: String!
  url: String!
  imageUrl: String
  score: Float
  createdAt: Long!
}

type Mutation {
  login(email: String!): LoginResponse

  createArticle(data: ArticleCreateInput!): Article!
  updateArticle(data: ArticleUpdateWhereInput!): Article!
  deleteArticle(data: ArticleDeleteWhereInput!): Article!

  createBucket(data: BucketCreateInput!): Bucket!
  deleteBucket(data: BucketDeleteInput!): Boolean!

  createImporter(data: ImporterCreateInput!): Importer!
  deleteImporter(data: ImporterDeleteInput!): Boolean!

  createNativeFeed(data: NativeFeedCreateInput!): NativeFeed!
  deleteNativeFeed(data: NativeFeedDeleteInput!): Boolean!

  createGenericFeed(data: GenericFeedCreateInput!): GenericFeed!
  updateGenericFeed(data: GenericFeedUpdateInput!): GenericFeed!
  deleteGenericFeed(data: GenericFeedDeleteInput!): Boolean!
}

input ArticleDeleteWhereInput {
  where: ArticleUniqueWhereInput!
}

input ArticleUpdateWhereInput {
  where: ArticleUniqueWhereInput!
  data: ArticleInput!
}

input ArticleInput {
  title: String!
}

input ArticleCreateInput {
  data: ArticleCreateOrConnectInput!
  reference: BucketOrNativeFeedOrArticleWhereInput
}

input BucketOrNativeFeedOrArticleWhereInput {
  article: ArticleUniqueWhereInput
  bucket: BucketUniqueWhereInput
  nativeFeed: NativeFeedUniqueWhereInput
}

input NativeFeedUniqueWhereInput {
  id: ID!
}

input BucketUniqueWhereInput {
  id: ID!
}

input ArticleCreateOrConnectInput {
  create: ArticleInput
  connect: ArticleUniqueWhereInput
}

input ArticleUniqueWhereInput {
  id: ID!
}

input ContentUniqueWhereInput {
  id: ID!
}

input ImporterWhereInput {
  importer: ImporterUniqueWhereInput
  bucketAndFeed: ImporterWhereBucketAndFeedInput
}

input ImporterWhereBucketAndFeedInput {
  bucket: BucketUniqueWhereInput!
  nativeFeed: NativeFeedUniqueWhereInput!
}

input GenericFeedDeleteInput {
  genericFeed: GenericFeedUniqueWhereInput!
}

input GenericFeedUniqueWhereInput {
  id: ID!
}

input NativeFeedDeleteInput {
  nativeFeed: NativeFeedUniqueWhereInput!
}

input ImporterDeleteInput {
  where: ImporterUniqueWhereInput!
}
input ImporterUniqueWhereInput {
  id: ID!
}

input BucketDeleteInput {
  where: BucketUniqueWhereInput!
}

input GenericFeedCreateInput {
  specification: GenericFeedSpecificationInput!
  title: String!
  description: String
  websiteUrl: String!
  language: String
  harvestItems: Boolean!
  harvestSiteWithPrerender: Boolean!
}

input GenericFeedUpdateInput {
  data: GenericFeedUpdateDataInput!
  where: GenericFeedUniqueWhereInput!
}

input GenericFeedUpdateDataInput {
  specification: GenericFeedSpecificationInput!
  title: String!
  description: String
  websiteUrl: String!
  harvestSiteWithPrerender: Boolean!
}

input GenericFeedSpecificationInput {
  selectors: SelectorsInput!
  parserOptions: ParserOptionsInput!
  fetchOptions: FetchOptionsInput!,
  refineOptions: RefineOptionsInput!
}

type GenericFeedSpecification {
  selectors: Selectors!
  parserOptions: ParserOptions!
  fetchOptions: FetchOptions!,
  refineOptions: RefineOptions!
}

enum ExtendContentOptions {
  PREVIOUS,
  NEXT,
  NONE,
  PREVIOUS_AND_NEXT
}

input SelectorsInput {
  linkXPath: String!
  extendContext: ExtendContentOptions!
  contextXPath: String!
  dateXPath: String!
  dateIsStartOfEvent: Boolean!
}

type Selectors {
  linkXPath: String!
  extendContext: ExtendContentOptions!
  contextXPath: String!
  dateXPath: String!
  dateIsStartOfEvent: Boolean!
}

input ImporterCreateInput {
  feed: NativeFeedCreateOrConnectInput!
  where: BucketUniqueWhereInput!
  autoRelease: Boolean!
}

input NativeFeedCreateOrConnectInput {
  connect: NativeFeedUniqueWhereInput
  create: NativeOrGenericFeedCreateInput
}

input NativeOrGenericFeedCreateInput {
  nativeFeed: NativeFeedCreateInput
  genericFeed: GenericFeedCreateInput
}

input BucketsPagedInput {
  page: Int!
  where: SearchBucketWhereInput!
  orderBy: BucketsOrderByInput
}

input BucketsOrderByInput {
  createdAt: SortOrder!
}

input NativeFeedsInput {
  page: Int!
  where: NativeFeedsWhereInput!
  orderBy: NativeFeedsOrderByInput
}

input GenericFeedsInput {
  page: Int!
  where: GenericFeedsWhereInput!
}

input NativeFeedsOrderByInput {
  lastPublishedAt: SortOrder
  createdAt: SortOrder
}

input NativeFeedsWhereInput {
  query: String
  feedUrl: String
}

input GenericFeedsWhereInput {
  websiteUrl: String
}

input SearchBucketWhereInput {
  orderBy: [SearchOrderByInput!]
  query: String!
}

input SearchOrderByInput {
  createdAt: SortOrder
  score: SortOrder
}

input DiscoverFeedsInput {
  parserOptions: ParserOptionsInput!
  fetchOptions: FetchOptionsInput!
}

input ParserOptionsInput {
  strictMode: Boolean!
}

input ArticlesInBucketInput {
  bucketId: String!
  filter: ArticlesWhereInput
}

input ArticlesPagedInput {
  page: Int!
  where: ArticlesWhereInput!
  orderBy: ArticlesOrderByInput
}

input ArticlesOrderByInput {
  releasedAt: SortOrder!
}

input ArticlesWhereInput {
  streamId: String!
  query: String
  type: ArticleTypeFilterInput
  status: ReleaseStatusFilterInput
}

input ReleaseStatusFilterInput {
  oneOf: [ReleaseStatus!]!
}

input ArticleTypeFilterInput {
  oneOf: [ArticleType!]!
}

input DigestInput {
  daily: Boolean!
  weekly: Boolean!
  monthly: Boolean!
}

input BucketCreateInput {
  name: String!
  description: String!
  websiteUrl: String
  visibility: BucketVisibility!
  releaseManually: Boolean!
  tags: [String]
  filter: String
}

input NativeFeedCreateInput {
  websiteUrl: String
  imageUrl: String
  language: String
  feedUrl: String!
  title: String!
  description: String
  lat: Long
  lon: Long
  harvestItems: Boolean!
  harvestSiteWithPrerender: Boolean!
}

type RemoteNativeFeed {
  title: String!
  description: String
  author: String
  websiteUrl: String
  language: String
  items: [Content!],
  feedUrl: String!
  publishedAt: Long!
  expired: Boolean!
}

type PagedBucketsResponse implements Paginated {
  pagination: Pagination!
  buckets: [Bucket!]!
}

type PagedNativeFeedsResponse implements Paginated {
  nativeFeeds: [NativeFeed!]!
  pagination: Pagination!
}

type PagedGenericFeedsResponse implements Paginated {
  genericFeeds: [GenericFeed!]!
  pagination: Pagination!
}

type PagedArticlesResponse implements Paginated {
  articles: [Article!]!
  pagination: Pagination!
}

type Pagination {
  page: Int!
  totalPages: Int!
  totalElements: Long!
  isLast: Boolean!
  isEmpty: Boolean!
  isFirst: Boolean!
}

type GenericFeed implements Entity {
  id: ID!
  specification: GenericFeedSpecification!
  feedUrl: String!
  hash: String!
  nativeFeedId: ID!
  createdAt: Long!
  #  nativeFeed: NativeFeed!
}

type NativeFeed implements Entity {
  id: ID!
  createdAt: Long!
  domain: String
  websiteUrl: String
  imageUrl: String
  iconUrl: String
  feedUrl: String!
  title: String!
  description: String
  streamId: String!
  status: String!
  genericFeed: GenericFeed
  lastUpdatedAt: Long
  lat: Long
  lon: Long
  importers: [Importer!]!
  #  importersCount: Long!
  articlesCount: Long!
}

type Bucket implements Entity {
  id: ID!
  createdAt: Long!
  title: String!
  description: String!
  websiteUrl: String
  imageUrl: String
  visibility: BucketVisibility!
  filter: String
  streamId: String!
  #  articles(filter: ArticlesWhereInput!): PagedArticlesResponse!
  lastUpdatedAt: Long
  importers: [Importer!]
  importersCount: Long!
  articlesCount: Long!
  #  owner
}

type Importer implements Entity {
  id: ID!
  createdAt: Long!
  autoRelease: Boolean!
  nativeFeedId: ID!
  nativeFeed: NativeFeed!
  bucketId: ID!
  bucket: Bucket!
}

type Enclosure {
  length: Float
  type: String!
  url: String!
}

type Article implements Entity {
  id: ID!
  createdAt: Long!
  status: ReleaseStatus!
  contentId: ID!
  streamId: ID!
  nativeFeedId: ID!
  bucket: Bucket!
  context: ArticleContext!
  nativeFeed: NativeFeed!
  content: Content!
  type: ArticleType!
}

type Content implements Entity {
  id: ID!
  createdAt: Long!
  title: String!
  description: String!
  hasFulltext: Boolean!
  contentTitle: String
  contentText: String
  contentRaw: String
  contentRawMime: String
  url: String!
  imageUrl: String
  publishedAt: Long!
  startingAt: Long
  updatedAt: Long!
  tags: [String]
  enclosures: [Enclosure!]
}

type FeedDiscoveryResponse {
  genericFeeds: GenericFeeds!
  nativeFeeds: [TransientNativeFeed!]
  #  relatedFeeds: [NativeFeedGql]
  websiteUrl: String!
  failed: Boolean!
  errorMessage: String
  document: FeedDiscoveryDocument
}

type FeedDiscoveryDocument {
  mimeType: String
  htmlBody: String
  title: String
  description: String
  language: String
  imageUrl: String
  favicon: String
}

type GenericFeeds {
  feeds: [TransientGenericFeed!]!
  parserOptions: ParserOptions!
  fetchOptions: FetchOptions!
}

type FetchOptions {
  websiteUrl: String!
  prerender: Boolean!
  prerenderWaitUntil: PuppeteerWaitUntil!
  prerenderWithoutMedia: Boolean!
  prerenderScript: String
}

type ParserOptions {
  strictMode: Boolean!
}

type TransientNativeFeed {
  url: String!
  type: String!
  title: String!
  description: String
}

type TransientGenericFeed {
  selectors: Selectors!
  hash: String!
  feedUrl: String!
  count: Int
  score: Float!
  samples: [Content!]!
}

input FetchOptionsInput {
  websiteUrl: String,
  prerender: Boolean
  prerenderWaitUntil: PuppeteerWaitUntil!
  prerenderWithoutMedia: Boolean!
  prerenderScript: String
}

enum PuppeteerWaitUntil {
  networkidle0
  networkidle2
  load
  domcontentloaded
}

type RefineOptions {
  filter: String,
  recovery: ArticleRecoveryType,
}

input RefineOptionsInput {
  filter: String,
  recovery: ArticleRecoveryType,
}

enum ArticleRecoveryType {
  NONE,
  METADATA,
  FULL
}

type LoginResponse {
  token: String!
  user: User!
}

type User implements Entity {
  id: ID!
  createdAt: Long!
  email: String!
  name: String!
  dateFormat: String
  timeFormat: String
}
