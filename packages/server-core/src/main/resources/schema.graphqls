scalar DateTime
scalar JSON

enum ReleaseStatusGql {
  released,
  needs_approval
}

enum ArticleTypeGql {
  digest
  feed
  ops,
  note
}

type Query {
#  bucketOrFeed(count: Int, offset: Int): [BucketGql]!
  articles(filter: ArticlesInStreamFilter!): [ArticleGql]!
  discoverFeeds(data: DiscoverFeedsInput!): FeedDiscoveryGql!
}

input DiscoverFeedsInput {
  url: String!
  prerender: Boolean
  corrId: String
}

type Mutation {
  login(email: String!): LoginResponse
  createBucket(data: BucketCreateInput!): BucketGql!
  createNativeFeed(data: NativeFeedCreateInput!): NativeFeedGql!
#  subscribe(data: UserSubscriptionInput): UserSubscriptionGql
}

input ArticlesInStreamFilter {
  id: String!
  page: Int!
  type: ArticleTypeGql!
  status: ReleaseStatusGql!
}

input UserSubscriptionInput {
  where: BucketOrFeedWhereUniqueInput!
  digest: Boolean!
  notify: Boolean!
}

input BucketOrFeedWhereUniqueInput {
  bucket: BucketWhereUniqueInput
  feed: NativeFeedWhereUniqueInput
}

input BucketWhereUniqueInput {
  id: String
}

input BucketCreateInput {
  name: String!
  description: String!
  listed: Boolean!
  releaseManually: Boolean!
  tags: [String]
  subscriptions: SubscriptionCreateOrConnectWithoutBucketInput
#  exporters: [ExporterData]
}

input SubscriptionCreateOrConnectWithoutBucketInput {
  where: SubscriptionWhereUniqueInput!
  create: SubscriptionCreateWithoutBucketInput!
}

input SubscriptionWhereUniqueInput {
  id: String
}

input SubscriptionCreateWithoutBucketInput {
  id: String
  active: Boolean
  createdAt: DateTime
  lastUpdatedAt: DateTime
  title: String!
  tags: JSON
  feed: NativeFeedCreateOrConnectInput!
  owner: UserConnectInput!
}

input NativeFeedCreateOrConnectInput {
  where: NativeFeedWhereUniqueInput!
  create: NativeFeedCreateInput!
}

input NativeFeedCreateInput {
  id: String
  websiteUrl: String!
  feedUrl: String!
  title: String
  description: String
  harvestSite: Boolean
  harvestSiteWithPrerender: Boolean
}

input UserConnectInput {
  where: UserWhereUniqueInput!
}

input NativeFeedWhereUniqueInput {
  id: String
}

input UserWhereUniqueInput {
  id: String
}

type GenericFeedGql {
  id: ID!
}

type NativeFeedGql {
  id: ID!
  domain: String!
  websiteUrl: String!
  feedUrl: String!
  title: String!
  description: String!
  status: String!
  genericFeed: GenericFeedGql
}

type BucketGql {
  id: ID!
  name: String!
  description: String!
  listed: Boolean!
  feeds: [NativeFeedGql]
#  owner
}

type EnclosureGql {
  length: Float,
  type: String!,
  url: String!
}
type ArticleGql {
  id: ID!
  title: String!
  contentRaw: String
  contentRawMime: String
  contentText: String!
  url: String!
  imageUrl: String
  publishedAt: Float!
  updatedAt: String!
  tags: [String]
  enclosures: [EnclosureGql]
}

input PaginationGql {
  page: Int!
  perPage: Int!
}

input SortGql {
  field: SortFieldGql!
  order: SortOrderGql!
}

enum SortOrderGql {
  desc, asc
}

enum SortFieldGql {
  publishedAt,

}

type FeedDiscoveryGql {
  genericFeedRules: [GenericFeedRuleGql]
#  relatedFeeds: [NativeFeedGql]
  mimeType: String
  nativeFeeds: [NativeFeedReferenceGql]
  failed: Boolean!
  errorMessage: String
}

type NativeFeedReferenceGql {
  url: String!
  type: String!
  title: String!
  description: String
}

type GenericFeedRuleGql {
  linkXPath: String!
  extendContext: String!
  contextXPath: String!
  dateXPath: String
  feedUrl: String!
  count: Int
  score: Float!
}

type FeedReferenceGql {
  websiteUrl: String
  feedUrl: String!
  title: String!
  description: String
  lastUpdatedAt: Float
}

type LoginResponse {
   token: String!
   user: UserGql!
}

type UserGql {
  id: String!
  email: String!
  name: String!
  dateFormat: String
  timeFormat: String
}
