options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleArticleFilter)

package org.migor.rich.rss.harvest.entryfilter.simple.generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleArticleFilter {

  private final Logger log = LoggerFactory.getLogger(SimpleArticleFilter.class);

  private boolean matchesAnywhere(String searchToken, String title, String description) {
      log.debug("\"${val}\"");
      return title.contains(searchToken) || description.contains(searchToken);
  }
}

PARSER_END(SimpleArticleFilter)
TOKEN: {
    <PLUS             : "+" >
  | <MINUS            : "-" >
  | <SEPARATORS       : (" "|"\n"|"\r"|"\r\n")+ >
  | <ANYTHING         : ~[" ", "+", "-"] (~[" ", "\n"])+ >
}

public boolean Matches(String title, String description) throws Exception :
{ boolean a,b; }
{
   <SEPARATORS>
    a = Matches(title, description)
    { return a; }
  |
    <EOF>
    { return true; }
|
  (
    a = MustContain(title, description)
  |
    a = MustNotContain(title, description)
  )
  b = Matches(title, description)
  { return a && b; }
}

private boolean MustContain(String title, String description) throws Exception :
{  Token t; }
{
    <PLUS>
    t = <ANYTHING>
    { log.debug("MustContain"); }
    { return matchesAnywhere(t.image, title, description); }
  |
    t = <ANYTHING>
    { log.debug("MustContain"); }
    { return matchesAnywhere(t.image, title, description); }
}

private boolean MustNotContain(String title, String description) throws Exception :
{  Token t; }
{
  <MINUS>
  t = <ANYTHING>
  { log.debug("MustNotContain"); }
  { return !matchesAnywhere(t.image, title, description); }
}
