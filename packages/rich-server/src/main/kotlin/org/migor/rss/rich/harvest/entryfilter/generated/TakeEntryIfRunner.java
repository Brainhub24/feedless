/* Generated By:JavaCC: Do not edit this line. TakeEntryIfRunner.java */
package org.migor.rss.rich.harvest.entryfilter.generated;

import org.apache.commons.lang3.StringUtils;
import java.util.Arrays;
import org.migor.rss.rich.database.model.SourceEntry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TakeEntryIfRunner implements TakeEntryIfRunnerConstants {

  private final Logger log = LoggerFactory.getLogger(TakeEntryIfRunner.class);

//  javacc *.jj
//  javac *.java
//  java FilterExprParser < input.txt
//
//  public static void main(String[] args) throws Exception {
//    Scanner scanner = new Scanner(System.in);
//
//    while(scanner.hasNextLine()) {
//      String line = scanner.nextLine();
//      TakeEntryIfRunner parser = new TakeEntryIfRunner(new ByteArrayInputStream(line.getBytes()));
//      System.out.println(line + " -> " + parser.takeIf(null));
//    }
//  }

  String strField(String fieldName, SourceEntry entry) {
    switch (fieldName) {
      case "content": return entry.getContent();
      case "title": return entry.getTitle();
    }
    throw new RuntimeException("Field '" + fieldName + "' is not supported");
  }

  double numField(String fieldName, SourceEntry entry) {
    switch (fieldName) {
      case "linkCount": return (double) entry.linkCount();
      case "score": return entry.getScore();
    }
    throw new RuntimeException("Field '" + fieldName + "' is not supported");
  }

  int wordCount(String val) {
    return (int) Arrays.stream(StringUtils.split(val, " ,;:'.!?"))
//      .filter(StringUtils::isNotBlank)
      .count();
  }

  int sentenceCount(String val) {
    return (int) Arrays.stream(StringUtils.split(val, ";.!?"))
//        .filter(StringUtils::isNotBlank)
        .count();
  }

  final public boolean takeIf(SourceEntry entry) throws ParseException, Exception {
  boolean b;
    b = BoolExpr(entry);
    jj_consume_token(0);
     {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public boolean BoolExpr(SourceEntry entry) throws ParseException, Exception {
   Token t; boolean result; boolean boolA, boolB;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      t = jj_consume_token(BOOL);
     boolA = Boolean.parseBoolean( t.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        boolB = BoolExpr(entry);
           {if (true) return boolA && boolB;}
        break;
      case OR:
        jj_consume_token(OR);
        boolB = BoolExpr(entry);
           {if (true) return boolA || boolB;}
        break;
      default:
        jj_la1[0] = jj_gen;
           {if (true) return boolA;}
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(LBRAKE);
     result = !BoolExpr(entry);
      jj_consume_token(RBRAKE);
    {if (true) return result;}
      break;
    case ENDSWITH:
      result = StringExpr(entry);
    {if (true) return result;}
      break;
    case NUM_FIELD:
    case SENTENCES:
    case WORDS:
    case LENGTH:
    case NUMBER:
      result = NumberExpr(entry);
    {if (true) return result;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean StringExpr(SourceEntry entry) throws ParseException, Exception {
   String strA, strB; boolean result;
    jj_consume_token(ENDSWITH);
    jj_consume_token(LBRAKE);
    strA = StringValue(entry);
    jj_consume_token(COMMA);
    strB = StringValue(entry);
     result = strA.endsWith(strB);
    jj_consume_token(RBRAKE);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String StringValue(SourceEntry entry) throws ParseException, Exception {
   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      jj_consume_token(QUOTE);
      t = jj_consume_token(STRING);
      jj_consume_token(QUOTE);
     {if (true) return t.image;}
      break;
    case STR_FIELD:
      t = jj_consume_token(STR_FIELD);
     {if (true) return strField( t.image, entry );}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean NumberExpr(SourceEntry entry) throws ParseException, Exception {
   double a, b; String str;
    a = Number(entry);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      b = Number(entry);
         {if (true) return a > b;}
      break;
    case LT:
      jj_consume_token(LT);
      b = Number(entry);
         {if (true) return a < b;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public double Number(SourceEntry entry) throws ParseException, Exception {
   Token t; int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
     {if (true) return Double.parseDouble( t.image );}
      break;
    case NUM_FIELD:
      t = jj_consume_token(NUM_FIELD);
     {if (true) return numField( t.image, entry );}
      break;
    case LENGTH:
      i = len(entry);
     {if (true) return (double)i;}
      break;
    case WORDS:
      i = words(entry);
     {if (true) return (double)i;}
      break;
    case SENTENCES:
      i = sentences(entry);
     {if (true) return (double)i;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int len(SourceEntry entry) throws ParseException, Exception {
   String str;
    jj_consume_token(LENGTH);
    jj_consume_token(LBRAKE);
    str = StringValue(entry);
    jj_consume_token(RBRAKE);
      {if (true) return str.length();}
    throw new Error("Missing return statement in function");
  }

  final public int words(SourceEntry entry) throws ParseException, Exception {
   String str;
    jj_consume_token(WORDS);
    jj_consume_token(LBRAKE);
    str = StringValue(entry);
    jj_consume_token(RBRAKE);
      {if (true) return wordCount(str);}
    throw new Error("Missing return statement in function");
  }

  final public int sentences(SourceEntry entry) throws ParseException, Exception {
   String str;
    jj_consume_token(SENTENCES);
    jj_consume_token(LBRAKE);
    str = StringValue(entry);
    jj_consume_token(RBRAKE);
      {if (true) return sentenceCount(str);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TakeEntryIfRunnerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x3813c0,0x8020,0xc00,0x2003c0,};
   }

  /** Constructor with InputStream. */
  public TakeEntryIfRunner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TakeEntryIfRunner(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TakeEntryIfRunnerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TakeEntryIfRunner(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TakeEntryIfRunnerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TakeEntryIfRunner(TakeEntryIfRunnerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TakeEntryIfRunnerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
