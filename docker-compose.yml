version: '3.3'

# envs https://medium.com/softonic-eng/docker-compose-from-development-to-production-88000124a57c

services:

  # https://hub.docker.com/_/rabbitmq/
  # https://newbedev.com/how-to-add-initial-users-when-starting-a-rabbitmq-docker-container
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq_net

  # https://hub.docker.com/_/postgres/
  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    environment:
#      - POSTGRES_DB=${databaseName}
      - POSTGRES_DB=rich-rss
#      - POSTGRES_USER=${sqlUser}
      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=${databasePassword}
      - POSTGRES_PASSWORD=admin
    expose:
      - 5432
    ports:
    - "5432:5432"
    networks:
      - sql_net

  rich-puppeteer:
    image: damoeb/rich-rss:puppeteer-0
    security_opt:
      - seccomp=./chrome.json
    restart: always
    ports:
      - "3000:3000"
#    healthcheck:
#      test: curl -f https://localhost:3000 || exit 1
    environment:
      - RABBITMQ_URL=amqp://${rabbitMqUser}:${rabbitMqPassword}@rabbitmq

  rich-core:
    image: damoeb/rich-rss:core
    restart: always
#    healthcheck:
#      test: curl -f https://localhost:8080 || exit 1
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - sqlUser=${sqlUser}
      - sqlPassword=${sqlPassword}
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${databaseName}
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_USERNAME=${rabbitMqUser}
      - RABBITMQ_PASSWORD=${rabbitMqPassword}
      - nitterHost=nitter
      - invidiousHost=invidious
    networks:
      - backend_net
      - sql_net
      - rabbitmq_net

# ----------------------------------------------------------------------------------------------------------------------
# -- MONITORING
# ----------------------------------------------------------------------------------------------------------------------

  loki:
    image: grafana/loki:2.5.0
    volumes:
      - ./docker/loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki.yml
    networks:
      - loki
      - backend_net

  prometheus:
    image: prom/prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
#    container_name: grafana-service
    ports:
      - "3000:3000"
    networks:
      - loki

networks:
  backend_net:
    driver: bridge
  sql_net:
    driver: bridge
  rabbitmq_net:
    driver: bridge
  loki:
    driver: bridge
