version: '3.4'

# envs https://medium.com/softonic-eng/docker-compose-from-development-to-production-88000124a57c

services:

  neo4j:
    image: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
#    volumes:
#      - ./conf:/conf
#      - ./data:/data
#      - ./import:/import
#      - ./logs:/logs
#      - ./plugins:/plugins
#    environment:
      # Raise memory limits
#      - NEO4J_dbms_memory_pagecache_size=1G
#      - NEO4J_dbms.memory.heap.initial_size=1G
#      - NEO4J_dbms_memory_heap_max__size=1G

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es
    environment:
      - discovery.type=single-node
#      - node.name=es-node
#      - cluster.name=es-cluster
#      - discovery.type=single-node
    ports:
      - "9200:9200"

  nitter:
    container_name: nitter
    image: zedeus/nitter:latest
    ports:
      - "8081:8080"
    volumes:
      - ./docker/nitter.conf:/src/nitter.conf:ro
    depends_on:
      - nitter-redis
    restart: unless-stopped
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2

  nitter-redis:
    image: redis:6-alpine
    container_name: nitter-redis
    command: redis-server --save 60 1 --loglevel warning
#    volumes:
#      - nitter-redis:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2

  # https://hub.docker.com/_/rabbitmq/
  # https://newbedev.com/how-to-add-initial-users-when-starting-a-rabbitmq-docker-container
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq

  # https://hub.docker.com/_/postgres/
  postgres:
    image: postgres:14
    container_name: postgres
    restart: unless-stopped
    environment:
#      - POSTGRES_DB=${databaseName}
      - POSTGRES_DB=rich-rss
#      - POSTGRES_USER=${sqlUser}
      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=${databasePassword}
      - POSTGRES_PASSWORD=admin
    expose:
      - 5432
    ports:
    - "5432:5432"
    networks:
      - postgres

  rich-puppeteer:
    image: damoeb/rich-rss:puppeteer-0
    security_opt:
      - seccomp=./chrome.json
    restart: unless-stopped
    ports:
      - "3000:3000"
#    healthcheck:
#      test: curl -f https://localhost:3000 || exit 1
    environment:
      - RABBITMQ_URL=amqp://${rabbitMqUser}:${rabbitMqPassword}@rabbitmq
    networks:
      - puppeteer
      - monitoring

  rich-core:
    image: damoeb/rich-rss:core
    restart: unless-stopped
#    healthcheck:
#      test: curl -f https://localhost:8080 || exit 1
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - sqlUser=${sqlUser}
      - sqlPassword=${sqlPassword}
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${databaseName}
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_USERNAME=${rabbitMqUser}
      - RABBITMQ_PASSWORD=${rabbitMqPassword}
      - nitterHost=nitter
      - invidiousHost=invidious
    networks:
      - postgres
      - rabbitmq
      - monitoring
      - puppeteer

# ----------------------------------------------------------------------------------------------------------------------
# -- MONITORING
# ----------------------------------------------------------------------------------------------------------------------

  loki:
    image: grafana/loki:2.5.0
    volumes:
      - ./docker/loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki.yml
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
#    container_name: grafana-service
    ports:
      - "3000:3000"
    networks:
      - monitoring

secrets:
  TOKEN_SECRET:
    file: ./tokenSecret.txt

networks:
  postgres:
    driver: bridge
  rabbitmq:
    driver: bridge
  monitoring:
    driver: bridge
  puppeteer:
    driver: bridge
